{# vim: filetype=django tabstop=4 shiftwidth=4 expandtab
-#}
{#
Routine can be of screen or test type. If screen there is only one
textual stimulus that need to be shown to the user.
If routine is of test type than we have arbitrary number of components.
-#}
{% macro init_component(comp) %}
{{comp|comp_type}}({{comp|default_params}}{% if comp.type.name == 'cross' %} vertices='cross',{% endif %}

  {% for param in comp.params|params_constant|params_used %}
      {{param|param_name}} = {{param|param_value}}{% if not loop.last %},{% endif %}

  {% endfor %})
{% endmacro %}

{%- macro init_routine_components(routine) -%}
# Initialize components for {{routine.name}} {{routine|type|replace("Type", "")|lower}}
{{routine.name}}_clock = core.Clock()
{% if routine|type == 'ScreenType' -%}
{{routine.name}} = visual.TextStim(win=win, name='{{routine.name}}',
    text=r'''{{routine.content}}''')
{% else %}
  {% for component in routine.components -%}
{{component.name}} = {{init_component(component)}}
  {% endfor %}

{{routine.name}}_components = [
    {{routine.components|map(attribute='name')|join(',\n    ')}}]
{% endif %}

{% endmacro %}

{%- macro trials_data(inst, inst_no) %}
  {% if inst|type == 'TestInst' %}
# Trial component settings for {{inst.name}} test
{{inst.name}}_{{inst_no}} = [
    {% for trial in inst.table %}
       # Trial {{loop.index}}
      {{trial | pprint_trial}},
    {% endfor %}
]
  {% endif %}
{% endmacro %}
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
{{m.description}}
----

WARNING:
This test was generated by pyFlies (https://github.com/igordejanovic/pyFlies)
on {{now}}. The code is partially based on the PsychoPy Builder compiler code.

If you are going to regenerate this file from the pyFlies model again
do not edit it manually or else your manual changes will be lost.

If you publish work using this script the most relevant publication is:

Peirce J, Gray JR, Simpson S, MacAskill M, Höchenberger R, Sogo H, Kastman E, Lindeløv JK. (2019)
    PsychoPy2: Experiments in behavior made easy Behav Res 51: 195.
    https://doi.org/10.3758/s13428-018-01193-y

"""
from __future__ import absolute_import, division

from psychopy import locale_setup
from psychopy import prefs
from psychopy import gui, visual, sound, core, data, event, logging, clock
from psychopy.constants import (NOT_STARTED, STARTED, PLAYING, PAUSED,
                                STOPPED, FINISHED, PRESSED, RELEASED, FOREVER)

import numpy as np  # whole numpy lib is available, prepend 'np.'
from numpy import (sin, cos, tan, log, log10, pi, average,
                   sqrt, std, deg2rad, rad2deg, linspace, asarray)
from numpy.random import random, randint, normal, shuffle
import os  # handy system and path functions
import sys  # to get file system encoding

from psychopy.hardware import keyboard


# Ensure that relative paths start from the same directory as this script
_thisDir = os.path.dirname(os.path.abspath(__file__))
os.chdir(_thisDir)

# Store info about the experiment session
psychopyVersion = '2020.1.3'
expName = '{{expName}}'
expInfo = {'participant': '', 'session': '001'}
dlg = gui.DlgFromDict(dictionary=expInfo, sort_keys=False, title=expName)
if dlg.OK == False:
    core.quit()  # user pressed cancel
expInfo['date'] = data.getDateStr()  # add a simple timestamp
expInfo['expName'] = expName
expInfo['psychopyVersion'] = psychopyVersion

# Data file name stem = absolute path + name; later add .psyexp, .csv, .log, etc
filename = os.path.join(_thisDir, u'data',
                        u'%s_%s_%s' % (expInfo['participant'], expName, expInfo['date']))

# An ExperimentHandler isn't essential but helps with data saving
thisExp = data.ExperimentHandler(name=expName, version='',
    extraInfo=expInfo, runtimeInfo=None,
    originPath=__file__,
    savePickle=True, saveWideText=True,
    dataFileName=filename)
# save a log file for detail verbose info
logFile = logging.LogFile(filename+'.log', level=logging.EXP)
logging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file

endExpNow = False  # flag for 'escape' or other condition => quit the exp
frameTolerance = 0.001  # how close to onset before 'same' frame

# Setup the Window
win = visual.Window(
    size={{s.resolution}}, fullscr={{s.fullScreen}},
    color='{{s.background}}', units='height')
# store frame rate of monitor if we can measure it
expInfo['frameRate'] = win.getActualFrameRate()
if expInfo['frameRate'] != None:
    frameDur = 1.0 / round(expInfo['frameRate'])
else:
    frameDur = 1.0 / 60.0  # could not measure, so guess

# create a default keyboard (e.g. to check for escape)
defaultKeyboard = keyboard.Keyboard()

{# Components initialization #}
{% for routine in m.routine_types -%}
{{init_routine_components(routine)}}
{%- endfor %}

{# Render trial data structure #}
{% for inst in m.flow.insts -%}
{{trials_data(inst, loop.index)}}
{% endfor %}

def execute_screen(screen, duration):
    "Displays the given screen"
    screen.setAutoDraw(True)
    win.flip()

    # Wait for the duration. During wait check for key presses.
    key = event.waitKeys(maxWait=duration if duration > 0 else float('inf'))
    screen.setAutoDraw(False)

    if key in ['escape', 'q']:
        core.quit()


def execute_test(test_trials, test_components):
    """
    Execute given test.  Run components with the given timing and collect
    responses.
    """

    def execute_phase(components, should_record=False):
        if not components:
            return
        # reset timers
        t = 0
        _timeToFirstFrame = win.getFutureFlipTime(clock="now")
        trialClock.reset(-_timeToFirstFrame)  # t0 is time of first possible flip
        frameN = -1
        continueTest = True

        while continueTest:
            t = trialClock.getTime()
            tThisFlip = win.getFutureFlipTime(clock=trialClock)
            tThisFlipGlobal = win.getFutureFlipTime(clock=None)
            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)

            # update/draw components on each frame
            for component in components:
                cinst = component['inst']
                if cinst.status == NOT_STARTED \
                    and tThisFlip >= component['at'] - frameTolerance:
                    # keep track of start time/frame for later
                    cinst.frameNStart = frameN  # exact frame index
                    cinst.tStart = t  # local t and not account for scr refresh
                    cinst.tStartRefresh = tThisFlipGlobal  # on global time
                    win.timeOnFlip(cinst, 'tStartRefresh')  # time at next scr refresh
                    cinst.status == STARTED

                    # Set component parameters for this trial
                    for pname, pval in component['params'].items():
                        setattr(cinst, pname, pval)

                    # If component is audible set duration and start playing
                    if component['type'] == 'audible':
                        cinst.secs = component['duration']
                        cinst.play()

                    # Display component on the next flip
                    if hasattr(cinst, 'setAutoDraw'):
                        cinst.setAutoDraw(True)

                if component['duration'] > 0 and cinst.status == STARTED:
                    # is it time to stop? (based on global clock, using actual start)
                    if tThisFlipGlobal > cinst.tStartRefresh \
                        + component['duration']-frameTolerance:
                        # keep track of stop time/frame for later
                        cinst.tStop = t  # not accounting for scr refresh
                        cinst.frameNStop = frameN  # exact frame index
                        cinst.status = FINISHED
                        win.timeOnFlip(cinst, 'tStopRefresh')  # time at next scr refresh

                        # If component is audible stop playing
                        if component['type'] == 'audible':
                            cinst.stop()

                        if hasattr(cinst, 'setAutoDraw'):
                            cinst.setAutoDraw(False)

            # check for quit (typically the Esc key)
            if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
                core.quit()

            # check if all components have finished
            if not continueTest:
                break
            continueTest = False  # will revert to True if at least one component still running
            for thisComponent in [c['inst'] for c in components]:
                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                    continueTest = True
                    break  # at least one component has not yet finished

            # refresh the screen
            if continueTest:  # don't flip if this test is over or we'll get a blank screen
                win.flip()

    # Run trials
    for trial in test_trials:
        for component in test_components:
            component.tStart = None
            component.tStop = None
            component.tStartRefresh = None
            component.tStopRefresh = None
            if hasattr(component, 'status'):
                component.status = NOT_STARTED

        for phase in ['ph_fix', 'ph_exec']:
            correct = execute_phase(trial[phase], should_record=phase=='ph_exec')

        if correct:
            execute_phase(trial['ph_correct'])
        else:
            execute_phase(trial['ph_error'])

# Create some handy timers
globalClock = core.Clock()  # to track the time since experiment started
trialClock = core.Clock()
routineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine

{# Execute flow #}
# Experiment flow
{% for inst in m.flow.insts %}
  {% if inst|type == "TestInst" %}
execute_test({{inst.name}}_{{loop.index}}, {{inst.spec.name}}_components)
  {% else %}
execute_screen({{inst.name}}, {{inst.duration|duration}})
  {% endif %}
{% endfor %}

# Flip one final time so any remaining win.callOnFlip()
# and win.timeOnFlip() tasks get executed before quitting
win.flip()

# these shouldn't be strictly necessary (should auto-save)
thisExp.saveAsWideText(filename+'.csv', delim='auto')
thisExp.saveAsPickle(filename)
logging.flush()
# make sure everything is closed down
thisExp.abort()  # or data files will save again on exit
win.close()
core.quit()

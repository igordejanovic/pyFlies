/*
  This is a textX specification of pyFlies DSL for cognitive test
  experiments definition.
  Author: Igor R. Dejanovic <igor DOT dejanovic AT gmail DOT com>
  Copyright: (c) 2014-2020 Igor R. Dejanovic <igor DOT dejanovic AT gmail DOT com>
  License: GPLv3 License
*/

import common

PyFliesModel:
  (description=Description)?
  vars*=VariableAssignment
  routines+=Routine
  (flow=Flow)?
  targets*=Target
;

Routine:
  Test | Screen
;

VariableAssignment:
    name=VariableName '=' value=Expression
;

TimeReference: start_relative?='.' (relative_op=SignOperator)? time=AdditiveExpression;

/*
    Test specification
*/

Test:
  "test" name=ID "{"
    'conditions' '{'
        table=ConditionsTable
    '}'

    'trial' '{'
        vars*=VariableAssignment
        components+=ConditionsComponents
    '}'
  "}"
;

ConditionsTable:
    // Condition table is given in orgmode table format. Various editor plugins
    // exists to support convenient editing of this table format.

    // Variable names are in the first line of condition specification
    '|' variables+=WORD['|'] '|'
    /\|(-*\+)+-*\|/

    // The rest of the description are condition specifications, one per line
    // The order of condition values match the param name positions.
    cond_specs+=Condition
;

Condition:
  '|' var_exps+=Expression['|'] '|'
;

ConditionsComponents:
  // Condition components is given in the form of
  // condition match expression : components definitions
  condition=Expression ':' components+=ComponentSpec
;


/*
    Components spec
*/

ComponentSpec:
    ('at' at=TimeReference)? component=Component ('for' duration=AdditiveExpression)?;

Component: name=ComponentName '(' params*=ComponentParam[',']  ')';
ComponentParam: name=ID value=Expression;

ComponentName: 'cross' | 'circle' | 'rectangle' | 'line' | 'image' | 'text' | 'sound' | 'audio'
             | 'key' | 'mouse';

/*
    Concrete components with parameters and default values will be
    defined in model/obj. processors to produce better error report.

Image:
    'image' '('
    (
        ('file' file=STRING)
        ('position' x=WORD (y=INT)?)
        ('width' width=Expression)?
        ('height' height=Expression)?
    )#[',']
  ')'
;

Circle: 'circle' '('
    (
        ('position' x=Expression (y=Expression)?)
        ('radius' radius=Expression)
        ('color' color=WORD)?
        ('fillColor' fillColor=WORD)?
        ('lineWidth' lineWidth=WORD)?
    )#[',']
    ')'
;

Rectangle:
    'rectangle' '('
    (
        ('position' x=Expression (y=Expression)?)
        ('width' width=Expression)?
        ('height' height=Expression)?
        ('color' color=WORD)?
        ('fillColor' fillColor=WORD)?
        ('lineWidth' lineWidth=WORD)?
    )#[',']
    ')'
;

Line:
    'line''('
    (
        ('from' from=Point)
        ('to' to=Point)
        ('color' color=WORD)?
        ('fillColor' fillColor=WORD)?
        ('lineWidth' lineWidth=WORD)?
    )#[',']
    ')'
;

Cross:
    'cross' '('
    (
        ('position' x=Expression (y=Expression)?)
        ('width' width=Expression)?
        ('height' height=Expression)?
        ('color' color=WORD)?
        ('fillColor' fillColor=WORD)?
        ('lineWidth' lineWidth=WORD)?
    )#[',']
    ')'
;

Text:
  'text' '(' text=TextType
   (','
        ( ('position' x=WORD (y=INT)?)?
          ('size' size=INT)?
          ('color' color=WORD)?
        )#[','])?
  ')'
;

Sound:
  'sound' '(' frequency=INT
    (',' (
           ('duration' duration=Duration)?
           (target?='target')
         )#[',']
    )?
  ')'
;

Audio:
  'audio' '(' file=STRING
    (',' (
           ('duration' duration=Duration)?
           (target?='target')
         )#[',']
    )?
  ')'
;


    */

WORD:
    INT|/[-\w]*\b/
;


Statement:
    Repeat | Show
;

Repeat:
  'repeat' what=Repeatable runs=INT ('times' | 'time')?
    full_random?=FullRandom random?='random' ('as'? practice?='practice')?
;

Repeatable:
    Block | TestRef
;

TestRef: test=[Test];

Block:
    '{'
        statements*=Statement
    '}'
;

FullRandom: 'full' 'random';

Show:
  'show' screen = [Screen]
;

Flow:
  'flow' '{'
    statements *= Statement
  '}'
;

Screen:
  'screen' name=ID "{"
  /*    content=/(.|\n)*?(?=})/  */
      content=/[^}]*/
  '}'
;

Target:
  'target' name=ID '{'
    'output' '=' output=STRING
    'responses' '{'
        responseMap*=ResponseMap
    '}'
    targetParam*=TargetParam
  '}'
;

TargetParam:
  name=ID '=' value=BASETYPE
;

ResponseMap:
  name=ID '=' target=BASETYPE
;



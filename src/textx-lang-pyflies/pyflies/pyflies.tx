/*
  This is a textX specification of pyFlies DSL for cognitive test
  experiments definition.
  Author: Igor R. Dejanovic <igor DOT dejanovic AT gmail DOT com>
  Copyright: (c) 2014-2020 Igor R. Dejanovic <igor DOT dejanovic AT gmail DOT com>
  License: GPLv3 License
*/

PyFliesModel:
  "experiment" name=STRING
  (description=STRING)?
  ("basepath" basepath=STRING)?
  variables*=VariableDef
  blocks+=BlockType
  structure=Structure
  targets*=Target
;

BlockType:
  TestType | ScreenType | SubjectType
;

VariableDef:
    name=ID '=' value=Value
;

Value:
    BaseTypeValue | CompoundTypeValue
;

BaseTypeValue: INT | FLOAT | STRING | BOOL;
CompoundTypeValue: Range | List;
Range: lower=INT '..' upper=INT;
List: '[' values*=Value[','] ']';


/*
    Expressions
*/
Expression: op=AndExpression ('or' op=AndExpression)*;
AndExpression: op=NotExpression ('and' op=NotExpression)*;
NotExpression: opn?='not' op=ComparisonExpression;
ComparisonExpression: op=AdditiveExpression ( opn=ComparisonOperator op=AdditiveExpression)*;
ComparisonOperator: '=='|'!='|'<='|'>='|'>'|'<';
AdditiveExpression: op=MultiplicativeExpression (opn=AdditiveOperator op=MultiplicativeExpression)*;
AdditiveOperator: '+'|'-';
MultiplicativeExpression: op=UnaryExpression (opn=MultiplicativeOperator op=UnaryExpression)*;
MultiplicativeOperator: '*'|'/';
UnaryExpression: (opn=SignOperator)? op=PrimaryExpression;
SignOperator: '-' | '+';
PrimaryExpression: '(' Expression ')' | MessageExpression | Value;
MessageExpression: value=CompoundTypeValue message=Message;
Message: 'random' | 'shuffle';


TimeReference: start_relative?='.' (relative_op=SignOperator)? time=INT;

/*
    Test specification
*/

TestType:
  "test" name=ID "{"
    'conditions' '{'
      // Strip all whitespaces before next WORD
      // because next rule is eolterm and
      // terminates on newlines.
      /\s*/

      // Parameter names are in the first line of condition specification
      condVarNames+=WORD[eolterm]    // match var names until end of line

      // The rest of the description are conditions, one per line
      // The order of condition values match the param name positions.
      conditions+=Condition
    '}'

    'stimuli' '{'
        condStimuli+=ConditionStimuli
        ('duration' duration=Duration)?
    '}'
  "}"
;

Condition:
  /\s*/
  varExps+=Expression[eolterm]  // match expressions until end of line
;

ConditionStimuli:
  // Condition stimuli is given in the form of
  // condition match expression : stimuli definitions
  conditionMatch=ConditionMatch ':' stimuli+=Stimulus
;

ConditionMatch:
  expression=ConditionMatchExpression
;

ConditionMatchExpression:
   FixedCondition | OrdinalCondition | ExpressionCondition
;

FixedCondition:
  expression = FixedConditionEnum
;

FixedConditionEnum:
  "all" | "error" | "fixation" | "correct"
;

OrdinalCondition: expression = INT;
ExpressionCondition: expression = Expression;


/*
    Stimuli spec
*/

StimulusInstance:
    ('at' at=TimeReference)? stimulus=StimulusSpec ('for' duration=INT)?;

StimulusSpec: name=ID '(' params=StimulusParam  ')';
StimulusParam: name=ID value=Expression;


Stimulus:
  Image | Circle | Rectangle | Line | Cross | Sound | Audio | Text
;

Image:
    'image' '('
    (
        ('file' file=STRING)
        ('position' x=WORD (y=INT)?)
        ('width' width=Expression)?
        ('height' height=Expression)?
    )#[',']
  ')'
;

Circle: 'circle' '('
    (
        ('position' x=Expression (y=Expression)?)
        ('radius' radius=Expression)
        ('color' color=WORD)?
        ('fillColor' fillColor=WORD)?
        ('lineWidth' lineWidth=WORD)?
    )#[',']
    ')'
;

Rectangle:
    'rectangle' '('
    (
        ('position' x=Expression (y=Expression)?)
        ('width' width=Expression)?
        ('height' height=Expression)?
        ('color' color=WORD)?
        ('fillColor' fillColor=WORD)?
        ('lineWidth' lineWidth=WORD)?
    )#[',']
    ')'
;

Line:
    'line''('
    (
        ('from' from=Point)
        ('to' to=Point)
        ('color' color=WORD)?
        ('fillColor' fillColor=WORD)?
        ('lineWidth' lineWidth=WORD)?
    )#[',']
    ')'
;

Cross:
    'cross' '('
    (
        ('position' x=Expression (y=Expression)?)
        ('width' width=Expression)?
        ('height' height=Expression)?
        ('color' color=WORD)?
        ('fillColor' fillColor=WORD)?
        ('lineWidth' lineWidth=WORD)?
    )#[',']
    ')'
;

Text:
  'text' '(' text=TextType
   (','
        ( ('position' x=WORD (y=INT)?)?
          ('size' size=INT)?
          ('color' color=WORD)?
        )#[','])?
  ')'
;

Sound:
  'sound' '(' frequency=INT
    (',' (
           ('duration' duration=Duration)?
           (target?='target')
         )#[',']
    )?
  ')'
;

Audio:
  'audio' '(' file=STRING
    (',' (
           ('duration' duration=Duration)?
           (target?='target')
         )#[',']
    )?
  ')'
;


TextType:
  STRING | /\w*\b/
;

WORD:
  INT|/[-\w]*\b/
;

Duration:
  /*
    _from , to - duration will be randomly choosen from the given interval.
    value - duration is fixed.
  */
  ('[' _from=INT ',' to=INT ']') | value = INT
;

Point:
  '[' x=INT ',' y=INT ']'
;

Block:
  Sequence | Randomize
;

TestInstance:
  'test' type=[TestType] trials=INT (practice?="practice" randomize?="randomize")#
;

ScreenInstance:
  'screen' type=[ScreenType]
;

SubjectInstance:
  'subject' type=[SubjectType]
;

Reference:
  TestInstance | ScreenInstance | SubjectInstance
;

StructureElement:
  Reference | Block
;


Structure:
  'structure' '{'
    elements*=StructureElement
  '}'
;

Sequence:
  'sequence' '{'
    elements*=StructureElement
  '}'
;

Randomize:
  'randomize' '{'
    elements*=StructureElement
  '}'
;

ScreenType:
  'screen' name=ID "{"
  /*    content=/(.|\n)*?(?=})/  */
      content=/[^}]*/
  '}'
;

SubjectType:
  'subject' name=ID '{'
    attribute+=SubjectAttribute
  '}'
;

SubjectAttribute:
  type=SubjectAttributeType name=ID (label=STRING)?
;

SubjectAttributeType:
  "int"|"string"|"float"|Enum
;

Enum:
  '[' values+=ID[','] ']'
;

Target:
  'target' name=ID '{'
    'output' '=' output=STRING
    'responses' '{'
        responseMap*=ResponseMap
    '}'
    targetParam*=TargetParam
  '}'
;

TargetParam:
  name=ID '=' value=BASETYPE
;

ResponseMap:
  name=ID '=' target=BASETYPE
;

// Special rule for comments
Comment:
  /\/\/.*$/|/\/\*(.|\n)*?\*\//  // Non-greedy match of block component content
;

